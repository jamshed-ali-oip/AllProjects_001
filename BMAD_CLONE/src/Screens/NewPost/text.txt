import React, {
  useEffect,
  useState,
  useRef
} from 'react';
import {
  TouchableOpacity,
  View,
  Text,
  ImageBackground,
  StyleSheet,
  StatusBar,
  SafeAreaView,
  PermissionsAndroid,
  Image,
  KeyboardAvoidingView,
  LayoutAnimation,
  Platform,
  UIManager,
  Animated,
  TouchableHighlight,
  TextInput,
  ScrollView
} from 'react-native';
import {
  widthPercentageToDP as wp,
  heightPercentageToDP as hp
} from 'react-native-responsive-screen';
import ImagePicker from "react-native-image-picker"
import ImagePickerMultiple from 'react-native-image-crop-picker';
import AppText from '../../Components/AppText';
import Icon from 'react-native-vector-icons/FontAwesome';
import Icon1 from 'react-native-vector-icons/FontAwesome5';
const NewPostScreen = ({
    navigation
  }) => {
    useEffect(() => {
      CheckPermission()

    }, [])
    const CheckPermission = () => {
      PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE, PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE).then(response => {
        console.log(response)
      })
    }

    const [filePath, setFilePath] = useState(null);
    // const [img, onSetImg] = useState([]);
    const [caption, onChangeCaption] = useState('');
    const launchCamera = () => {
      var options = {
        title: 'Select Image',
        allowsEditing: true,
        quality: 0.9,
        maxWidth: 1200,
        maxHeight: 1200,
        mediaType: "photo",
        customButtons: [{
          name: 'customOptionKey',
          title: 'Choose Multiple Photos'
        }, ],
        storageOptions: {
          skipBackup: true,
          path: 'images',
        },
      };
      // const options = {
      //   multiple: true,
      //   quality: 1.0,
      //   maxWidth: 500,
      //   maxHeight: 500,
      //   storageOptions: {
      //     skipBackup: true
      //   }
      // };

      // console.log(ImagePicker.launchCamera)
      ImagePicker.showImagePicker(options, (response) => {
        console.log('Response = ', response);
        var ArraySingleImage = []
        if (response.didCancel) {
          console.log('User cancelled image picker');
        } else if (response.error) {
          console.log('ImagePicker Error: ', response.error);
        } else if (response.customButton) {
          console.log(
            'User tapped custom button: ',
            response.customButton
          );
          SelectMultipleImage()
          // alert(response.customButton);
        } else {
          const source = {
            uri: 'data:image/jpeg;base64,' + response.data
          };
          console.log(source)

          ArraySingleImage.push(source)
          // let source = response;
          // You can also display the image using data:
          // let pic =  { uri: response.path };
          // console.log(pic)
          // console.log(response.uri)

          // let showImage = {
          //   uri: 'data:image/jpeg;base64,' + pic
          // };
          // onSetImg(showImage)
          setFilePath(ArraySingleImage);
        }
      });
    };

    const SelectMultipleImage = () => {
      ImagePickerMultiple.openPicker({
        multiple: true,
        width: 300,
        height: 400,
        cropping: true,
        includeBase64: true,
        // includeExif: true
      }).then((response) => {
        // const js = JSON.parse(response) 
        console.log(response.length);
        var ImageArray = [];
        for (var i = 0; i < response.length; i++) {
          // const con = JSON.parse(response) 
          // console.log(response[i].data)
          // var URL = js[i];
          // console.log(URL)
          let showImage = {
            uri: 'data:image/jpeg;base64,' + response[i].data
          };
          console.log(showImage)
          ImageArray.push(showImage);
        }
        setFilePath(ImageArray);
        // let source = response.data
        // let showImage = {
        //   uri: 'data:image/jpeg;base64,' + response.data
        // };
        // const source = { uri: 'data:image/jpeg;base64,' + response.data };
        // setFilePath(showImage);
      }).catch((err) => {
        console.log(err)
      })
    }
    console.log()
    return ( <
        View style = {
          styles.container
        } >


        <
        KeyboardAvoidingView >
        <
        View style = {
          {
            paddingLeft: 10
          }
        } >
        <
        AppText nol = {
          1
        }
        textAlign = "left"
        family = "Poppins-Regular"
        size = {
          hp("3.5%")
        }
        color = "black"
        Label = {
          'Add Pictures'
        }
        /> < /
        View > <
        ScrollView scrollToOverflowEnabled showsHorizontalScrollIndicator = {
          false
        }
        horizontal = {
          true
        }
        scrollEnabled style = {
          {
            height: '30%',
            width: '100%',
            paddingBottom: 100
          }
        } >
        <
        TouchableOpacity onPress = {
          launchCamera
        }
        style = {
          {
            backgroundColor: 'white',
            borderRadius: 3,
            elevation: 9,
            zIndex: 199,
            flex: 1,
            justifyContent: 'center',
            alignContent: 'center',
            marginLeft: 20,
            marginTop: 20,
            marginRight: 20
          }
        } > {
          /* <View style={{height: '15%', backgroundColor:'white', borderRadius: 3, elevation: 9, zIndex: 199,flex: 1, justifyContent:'center', alignContent:'center', marginLeft: 20, marginTop: 20,marginRight: 20}}> */
        } <
        View style = {
          {
            justifyContent: 'center',
            alignContent: 'center',
            flexDirection: 'row',
            paddingLeft: 42,
            paddingRight: 42
          }
        } >
        <
        Icon name = "camera"
        size = {
          28
        }
        color = "#B01125" / >
        <
        Icon1 name = "plus"
        size = {
          12
        }
        style = {
          {
            top: -10
          }
        }
        color = "#B01125" / >
        <
        /View> {
        /* </View> */
      } <
      /TouchableOpacity> {
    filePath != null ?
      filePath.map((item, index) => {
        return ( <
          View key = {
            index
          }
          style = {
            {
              flexDirection: 'row',
              justifyContent: 'flex-start',
              alignItems: 'flex-start',
              alignContent: 'center',
              padding: 11,
              height: '100%'
            }
          } >
          <
          Image resizeMode = 'cover'
          key = {
            index
          }
          source = {
            item
          }
          style = {
            {
              width: 130,
              height: '77%',
              marginHorizontal: 3,
              top: 8,
              backgroundColor: 'white',
              borderRadius: 3,

            }
          }
          /> < /
          View >
        )
      }) : null
  }

  <
  /ScrollView> <
ScrollView scrollEnabled style = {
  {
    height: '50%',
    width: '100%',
  }
}
showsVerticalScrollIndicator = {
    false
  } >
  <
  View style = {
    {
      backgroundColor: '#B01125',
      borderTopRightRadius: 20,
    }
  } >
  <
  View style = {
    {
      padding: 20
    }
  } >
  <
  AppText nol = {
    1
  }
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/> <
TextInput placeholder = "Details"
value = {
  caption
}
placeholderTextColor = "white"
keyboardType = 'default'
onChange = {
  onChangeCaption
}
multiline = {
  true
}
maxLength = {
  40
}
textAlignVertical = 'top'
style = {
  {
    width: '100%',
    backgroundColor: '#D19F9F',
    borderRadius: 6,
    top: 10,
    color: 'white',
    height: '50%',
    fontSize: hp('1.8')
  }
}

/> <
AppText nol = {
  1
}
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/> <
AppText nol = {
  1
}
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/> <
AppText nol = {
  1
}
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/> <
AppText nol = {
  1
}
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/> <
AppText nol = {
  1
}
textAlign = "left"
family = "Poppins-Regular"
size = {
  hp("2%")
}
color = "white"
Label = {
  'Details you want to add'
}
/>

<
/View>

<
/View> < /
ScrollView > <
  /KeyboardAvoidingView> < /
View >
)
}


export default NewPostScreen;

var styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    height: hp('103%'),
    backgroundColor: 'white'
  }
})